#!/usr/bin/env python3
import argparse
import collections
import csv
import itertools
import json
import re
import sys
from typing import (
    Any,
    Callable,
    Deque,
    Dict,
    Iterable,
    Iterator,
    List,
    NamedTuple,
    Optional,
    TextIO,
    Tuple,
)


class Spell(NamedTuple):
    name: str
    level: int
    school: str
    cantrip: bool
    ritual: bool
    casting_time: str
    range: str
    verbal: bool
    material: bool
    somatic: bool
    materials: Optional[str]
    duration: str
    concentration: bool
    description: str


class Formatter:
    def __init__(self, output: TextIO) -> None:
        self.output = output

    def format(self, record: Spell) -> None:
        raise NotImplementedError


class CSVFormatter(Formatter):
    def __init__(self, output: TextIO, writer: csv.DictWriter) -> None:
        super().__init__(output)
        self.writer = writer

    def format(self, spell: Spell) -> None:
        self.writer.writerow(spell._asdict())


class JSONFormatter(Formatter):
    def format(self, spell: Spell) -> None:
        print(json.dumps(spell._asdict()), file=self.output)


def window(iterable: Iterable, n: int = 2) -> Iterator[Deque]:
    it = iter(iterable)
    window = collections.deque((next(it, None) for _ in range(n)), maxlen=n)
    yield window
    for element in it:
        window.append(element)
        yield window


def parse(buf: TextIO) -> Iterator[Spell]:
    get_attr_value: Callable[[str], str] = lambda line: line.split(': ', 1)[-1]

    def _parse_summary(line: str) -> Tuple[int, str, bool, bool]:
        if line[0].isdigit():
            level = int(line[0])
            school = line.split()[1].lower()
        else:
            level = 0
            school = line.split()[0].lower()
        ritual = 'ritual' in middle
        cantrip = 'cantrip' in middle
        return (level, school, ritual, cantrip)

    # This is a dict to hold spell attributes before yielding.
    record: Dict[str, Any] = {}
    # Accumulate description lines in this list before yielding.
    description: List[str] = []
    # There are no record delimiters in the extracted text, so use the first
    # named field (Casting Time) to detect a new spell block.
    # This is separated from the spell name by one line:
    #
    #   Wish
    #   9th-level conjuration
    #   Casting Time: 1 action
    #
    # Iterate over a sliding window of three lines.
    viewer = window(buf, n=3)
    for view in viewer:
        # Strip trailing \n.
        head, middle, tail = (line.rstrip() for line in view)
        # This is the complicated bit: parse the first three lines of a spell
        # block at once.
        if tail.startswith('Casting Time'):
            # This is the start of a new spell block. Yield the old one.
            if record:
                # Assemble accumulated description field.
                record['description'] = ' '.join(description).replace(' \t', '\n')
                yield Spell(**record)
            # Start a new spell block.
            record = {}
            description = []
            level, school, ritual, cantrip = _parse_summary(middle)
            record = {
                'cantrip': cantrip,
                'casting_time': get_attr_value(tail).lower(),
                'level': level,
                'name': head,
                'ritual': ritual,
                'school': school,
            }
            # We already processed the first three lines of the spell block,
            # skip the next two iterations to get a fresh window.
            next(viewer, None)
            next(viewer, None)
            continue
        if head.startswith('Range'):
            record['range'] = get_attr_value(head).lower()
        elif head.startswith('Duration'):
            duration = get_attr_value(head).lower()
            record['concentration'] = 'concentration' in duration
            record['duration'] = duration.replace('concentration, ', '')
        # Contagion (p. 129) has a typo. Match on "Component" instead of
        # "Components".
        elif head.startswith('Component'):
            components = get_attr_value(head)
            record['verbal'] = 'V' in components
            record['somatic'] = 'S' in components
            record['material'] = 'M' in components
            match = re.search(r'\((?P<materials>[^\)]*)', components)
            record['materials'] = match.group('materials') if match else None
        else:
            # Assume any remaining lines belong to description.
            description.append(head)
    # Finalize last record.
    description.extend((middle, tail))
    record['description'] = ' '.join(description).replace(' \t', '\n')
    yield Spell(**record)


def parse_args(argv: List[str]) -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'input',
        default=sys.stdin,
        help='File containing extracted text, or - to read from standard input (default: standard input)',
        nargs='?',
        type=argparse.FileType('r'),
    )
    parser.add_argument(
        'output',
        default=sys.stdout,
        help='Output file (default: standard output)',
        nargs='?',
        type=argparse.FileType('w'),
    )
    parser.add_argument(
        '-f', '--format',
        choices=('csv', 'json'),
        help='Output format',
        default='csv',
    )
    return parser.parse_args(argv)


def main(argv: Optional[List[str]] = None) -> int:
    argv = argv if argv else sys.argv[1:]
    args = parse_args(argv)
    if args.format == 'json':
        formatter = JSONFormatter(args.output)
    elif args.format == 'csv':
        writer = csv.DictWriter(args.output, Spell._fields)
        writer.writeheader()
        formatter = CSVFormatter(args.output, writer)  # type: ignore
    for spell in parse(args.input):
        formatter.format(spell)
    return 0


if __name__ == '__main__':
    sys.exit(main())
